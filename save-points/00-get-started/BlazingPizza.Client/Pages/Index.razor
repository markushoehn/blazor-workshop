@page "/"
@inject HttpClient HttpClient

<div class="main">
	<ul class="pizza-cards">
		@if (specials != null)
		{
			@foreach (var s in specials)
			{
				<li @onclick="@(() => ShowConfigurePizzaDialog(s))" style="background-image: url('@s.ImageUrl')">
					<div class="pizza-info">
						<span class="title">@s.Name</span>
						@s.Description
						<span class="price">@s.GetFormattedBasePrice()</span>
					</div>
				</li>
			}
		}
	</ul>
</div>

<div class="sidebar">
	@if (order.Pizzas.Any())
	{
		<div class="order-contentes">
			<h2>Your order</h2>

			@foreach (var p in order.Pizzas)
			{
				<ConfiguredPizzaItem Pizza="p" OnRemoved="@(()=> RemoveConfiguratedPizza(p))" />
			}
		</div>
	}
	else
	{
		<div class="empty-cart">Choose a pizza<br>to get started</div>
	}

	<div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
		Total:
		<span class="total-price">@order.GetFormattedTotalPrice()</span>
		<button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">Order ></button>
	</div>
</div>


@if (showingConfigurationDialog)
{
	<ConfigurePizzaDialog Pizza="configuringPizza"
						  OnCancel="CancelConfigurePizzaDialog"
						  OnConfirm="ConfirmConfigurePizzaDialog" />
}


@code {
	List<PizzaSpecial> specials;

	Pizza configuringPizza;
	bool showingConfigurationDialog;

	Order order = new Order();

	protected override async Task OnInitializedAsync()
	{
		specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials", BlazingPizza.OrderContext.Default.ListPizzaSpecial);
	}

	#region dialog
	void ShowConfigurePizzaDialog(PizzaSpecial special)
	{
		configuringPizza = new Pizza()
			{
				Special = special,
				SpecialId = special.Id,
				Size = Pizza.DefaultSize,
				Toppings = new List<PizzaTopping>(),
			};

		showingConfigurationDialog = true;
	}

	void ConfirmConfigurePizzaDialog()
	{
		order.Pizzas.Add(configuringPizza);
		CloseConfigurationDialog();
	}

	void CancelConfigurePizzaDialog() => CloseConfigurationDialog();


	void CloseConfigurationDialog()
	{
		configuringPizza = null;
		showingConfigurationDialog = false;
	}
	#endregion

	#region sidebar
	void RemoveConfiguratedPizza(Pizza p) => order.Pizzas.Remove(p);

	async Task PlaceOrder()
	{
		await HttpClient.PostAsJsonAsync("orders", order);
		order = new Order();
	}
	#endregion
}
